// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configurations;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(ItemContext))]
    [Migration("20250213092711_BlockName")]
    partial class BlockName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entites.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("ITEMS");
                });

            modelBuilder.Entity("Model.Entites.ItemType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ITEM_TYPE_ID");

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypes");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.Entites.Structure", b =>
                {
                    b.Property<int>("StructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("STRUCTURE_ID");

                    b.HasKey("StructureId");

                    b.ToTable("STRUCTURES");
                });

            modelBuilder.Entity("Model.Entites.Block", b =>
                {
                    b.HasBaseType("Model.Entites.ItemType");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NAME");

                    b.ToTable("BLOCKS", (string)null);
                });

            modelBuilder.Entity("Model.Entites.Entity", b =>
                {
                    b.HasBaseType("Model.Entites.ItemType");

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("DESCRIPTION");

                    b.ToTable("ENTITIES", (string)null);
                });

            modelBuilder.Entity("Model.Entites.Tool", b =>
                {
                    b.HasBaseType("Model.Entites.ItemType");

                    b.ToTable("TOOLS", (string)null);
                });

            modelBuilder.Entity("Model.Entites.Weapon", b =>
                {
                    b.HasBaseType("Model.Entites.ItemType");

                    b.ToTable("WEAPONS", (string)null);
                });

            modelBuilder.Entity("Model.Entites.Item", b =>
                {
                    b.HasOne("Model.Entites.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("Model.Entites.Block", b =>
                {
                    b.HasOne("Model.Entites.ItemType", null)
                        .WithOne()
                        .HasForeignKey("Model.Entites.Block", "ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entites.Entity", b =>
                {
                    b.HasOne("Model.Entites.ItemType", null)
                        .WithOne()
                        .HasForeignKey("Model.Entites.Entity", "ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entites.Tool", b =>
                {
                    b.HasOne("Model.Entites.ItemType", null)
                        .WithOne()
                        .HasForeignKey("Model.Entites.Tool", "ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entites.Weapon", b =>
                {
                    b.HasOne("Model.Entites.ItemType", null)
                        .WithOne()
                        .HasForeignKey("Model.Entites.Weapon", "ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
